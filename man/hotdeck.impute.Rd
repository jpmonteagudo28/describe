% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute.R
\name{hotdeck.impute}
\alias{hotdeck.impute}
\title{Hot deck imputation}
\usage{
hotdeck.impute(
  data,
  method = "deterministic",
  k = NULL,
  seed = NULL,
  na.rm = TRUE
)
}
\arguments{
\item{data}{a matrix or data frame containing missing values in at least one predictor}

\item{method}{selection method for imputing missing values based on donor similarity.
Can be one of:
\describe{
\item{\code{"deterministic"}}{Select the same donor value for multiple repetitions of the CDI.}
\item{\code{"rand_from_all"}}{Select a different donor value for each repetition of the CDI.}
\item{\code{"rand_nearest_k"}}{Select one random donor value from a subset of k nearest neighbors for each repetition of the CDI.}
\item{\code{"weighted_rand"}}{Select one random donor through a probability-weighted choice for each repetition of the CDI.}
}}

\item{k}{number of nearest neighbors to select from when using the \code{rand_nearest_k} method.}

\item{seed}{a numeric seed for reproducible results for every method except deterministic selection}

\item{na.rm}{indicates removal of NA values from every row in the matrix or data frame}
}
\value{
a matrix or data frame of imputed values
}
\description{
Hot deck imputation (HDI) is a univariate imputation technique where, for each
respondent or recipient with a missing value, we find a donor with similar values across
a subset of categorical or numerical predictors and use it to fill the recipient's missing
observation. For this reason, HDI has been used with stratification across
categorical variables.

The current implementation of HDI allows the user to choose one of four selection
methods: deterministic, random sampling from all possible donors, from k-nearest neighbors and
random sampling using weights as probabilities. The function will iteratively impute missing values across
all variables with missing observations using the selection method specified in the function arguments.
}
\examples{
data <- gen.mcar(100,rho = c(.56,.23,.18),sigma = c(1,2,.5),n_vars = 3,na_prob = .18)
hot_data <- hotdeck.impute(data)
summary(hot_data)
}
